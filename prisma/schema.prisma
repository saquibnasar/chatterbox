// This is your Prisma schema file,

// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Product {
  id                     String                 @id @default(uuid())
  name                   String
  priceInCents           Int
  filePath               String
  imagePath              String
  description            String
  isAvailableForPurchase Boolean                @default(true)
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  orders                 Order[]
  downloadVerifications  DownloadVerification[]
}

// new 

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  name      String   
  imageUrl  String   @db.Text
  email     String  @db.Text 

  server    Server[]
  member    Member[]
  channels  Channels[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
id String @id @default(uuid())
name String
imageUrl String @db. Text inviteCode String @db. Text
profileld String
profile Profile @relation (fields:references: profileldle references:id.Lidl, onDe onDelete: Cascade)

member Member[]
channels  Channels[]

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

@@index([profileId])
}

enum MemberRole{
  ADMIN 
  MODERATER
  GUEST 

}
model Member {
id String @id @default (uuid()) 
role MemberRole @default (GUEST)

profileld String
profile Profile @relation(fields: [profileIdl, references: [idl, onDelete: Cascade)

serverId String
server Server @relation(fields: [serverIdl, references: [idl, onDelete: Cascade)

createdAt DateTime @default (now())
updatedAt DateTime @updatedAt

@@index ([profileId])
@@index ([serverId])
}

enum ChannelType {
TEXT
AUDIO 
VIDEO
}

model Channel {
id String @id @default(uuid())
name String
type ChannelType @default (TEXT)

profileld String
profile Profile @relation(fields: [profileid, references: [id, onDelete: Cascade)

serverId String
server Server @relation(fields: [serverid, references: [id, onDelete: Cascade)

createdAt DateTime @default (now())
updatedAt DateTime @updatedAt

@@index ([profileId])
@@index ([serverId])

}
// end 

