// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  name      String   
  imageUrl  String   @unique
  email     String   @unique 

  server    Server[]
  members    Members[]
  channel  Channel[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
id String @id @default(uuid())
name String
imageUrl String @unique
inviteCode String @unique

profileId String
profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

members Members[]
channels  Channel[]

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

@@index([profileId])
}
// CREATE TABLE MemberRole (
// pType      TEXT CHECK( pType IN ('ADMIN','MODERATER','GUEST') )   NOT NULL DEFAULT 'GUEST',
//)

// enum MemberRole{
//  ADMIN 
// MODERATER
//  GUEST 
//    }

model Members {
id String @id @default (uuid()) 
role String 

profileId String
profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

serverId String
server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

createdAt DateTime @default (now())
updatedAt DateTime @updatedAt

@@index ([profileId])
@@index ([serverId])
}

// CREATE TABLE ChannelType (
// Type   TEXT CHECK( pType IN ('TEXT','AUDIO','VIDEO') )   NOT NULL DEFAULT 'TEXT',
// )

// enums ChannelType {
// TEXT
// AUDIO 
// VIDEO
// }

model Channel {
id String @id @default(uuid())
name String
type String @default("TEXT")

profileId String
profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

serverId String
server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

@@index ([profileId])
@@index ([serverId])
}
